name: Deploy
description: Deploy the build artifact to the server

on:
  workflow_call:
    inputs:
      build_name:
        required: true
        type: string
      environment:
        required: true
        type: string

  workflow_dispatch:
    inputs:
      run_id:
        description: 'The GitHub Actions run ID of the build to deploy'
        required: false
        type: string
      build_name:
        description: 'The name of the build artifact to deploy'
        required: true
        type: string
      environment:
        description: 'The deployment environment'
        required: true
        type: environment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Download the build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.build_name }}
          path: ~/build
          run-id: ${{ inputs.run_id || github.run_id }}

      - name: Copy the build to the server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.INSTANCE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.INSTANCE_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa ${{ vars.INSTANCE_USERNAME }}@${{ vars.INSTANCE_HOST }} "rm -d -r -f ~/build"
          scp -i ~/.ssh/id_rsa -r ~/build ${{ vars.INSTANCE_USERNAME }}@${{ vars.INSTANCE_HOST }}:~/

      - name: Write .env file to the server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ vars.INSTANCE_USERNAME }}@${{ vars.INSTANCE_HOST }} "bash -c 'cat > ~/build/.env <<EOF
          MOTD_ROOT_ADMINS=\"${{ vars.MOTD_ROOT_ADMINS }}\"
          MOTD_WEB_PORT=\"${{ vars.MOTD_WEB_PORT }}\"
          MOTD_DEBUG_LOG=\"${{ vars.MOTD_DEBUG_LOG }}\"
          MOTD_SSL_CERT=\"${{ secrets.MOTD_SSL_CERT }}\"
          MOTD_SSL_PRIVATE_KEY=\"${{ secrets.MOTD_SSL_PRIVATE_KEY }}\"
          MOTD_EFPS_KEY=\"${{ secrets.MOTD_EFPS_KEY }}\"
          MOTD_MAXMIND_LICENSE_KEY=\"${{ secrets.MOTD_MAXMIND_LICENSE_KEY }}\"
          POSTGRES_HOST=\"${{ vars.POSTGRES_HOST }}\"
          POSTGRES_PORT=\"${{ vars.POSTGRES_PORT }}\"
          POSTGRES_USER=\"${{ secrets.POSTGRES_USER }}\"
          POSTGRES_PASSWORD=\"${{ secrets.POSTGRES_PASSWORD }}\"
          YANDEX_TRANSLATE_API_KEY=\"${{ secrets.YANDEX_TRANSLATE_API_KEY }}\"
          EOF'"

      - name: Write prometheus web config to the server (via decoded base64)
        run: |
          ssh -i ~/.ssh/id_rsa ${{ vars.INSTANCE_USERNAME }}@${{ vars.INSTANCE_HOST }} <<'EOF'
            mkdir -p ~/build/prometheus
            echo "basic_auth_users:" > ~/build/prometheus/web.yaml
            echo -n "  admin: \"" >> ~/build/prometheus/web.yaml
            echo "${{ secrets.PROM_PASSWORD_BCRYPT_B64 }}" | base64 -d >> ~/build/prometheus/web.yaml
            echo "\"" >> ~/build/prometheus/web.yaml
          EOF


      - name: Deploy the build
        run: |
          ssh -i ~/.ssh/id_rsa ${{ vars.INSTANCE_USERNAME }}@${{ vars.INSTANCE_HOST }} "
          cd ~/build && docker compose -p motd-menu up --build -d"
