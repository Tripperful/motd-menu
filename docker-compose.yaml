name: motd-menu
volumes:
  postgres_data:
  prometheus_data:
  certbot-etc:
  certbot-var:
  certbot-log:
  telegram-bot-api-data:
services:
  db:
    image: 'postgres:latest'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
        ]
      interval: 1s
      timeout: 60s
      retries: 5
    restart: unless-stopped
    ports:
      - 5432:5432
  server:
    build:
      context: .
      target: server
      dockerfile: docker/server.Dockerfile
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - certbot-etc:/etc/letsencrypt
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -ksf https://localhost:${MOTD_WEB_PORT}/healthcheck || exit 1"
        ]
      interval: 1s
      timeout: 60s
      retries: 5
      start_period: 300s
    ports:
      - ${MOTD_WEB_PORT}:${MOTD_WEB_PORT}
    restart: unless-stopped

  prometheus:
    depends_on: 
      - server
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus:/etc/prometheus:ro
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/config.yaml'
      - '--web.config.file=/etc/prometheus/web.yaml'
    restart: unless-stopped

  certbot:
    build:
      context: .
      target: certbot
      dockerfile: docker/certbot.Dockerfile
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-log:/var/log/letsencrypt
    env_file:
      - .env
    ports:
      - 80:80

  telegram-bot-api:
    image: aiogram/telegram-bot-api:latest
    env_file:
      - .env
    volumes:
      - telegram-bot-api-data:/var/lib/telegram-bot-api
    ports:
      - 8081:8081